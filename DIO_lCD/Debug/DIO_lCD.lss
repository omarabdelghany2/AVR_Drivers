
DIO_lCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000006fc  00000790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  0000079a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016cc  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c7  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d2  00000000  00000000  000029a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00003378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000675  00000000  00000000  00003554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ad3  00000000  00000000  00003bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000469c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
  8a:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_LAB>:

#define potent			1
#define button			2
#define LED				3
void ADC_LAB()
{	
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	LCD_Intialize();
  a6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Intialize>
	
	DIO_SetPinDirection(PORTA,potent,Input);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 39 02 	call	0x472	; 0x472 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,button,Input);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 39 02 	call	0x472	; 0x472 <DIO_SetPinDirection>
		char StringResult[10];
		
	
	ADC_Intialize();
  be:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ADC_Intialize>
	while(1)
	{
		ADC_StartConversion(potent);
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 02 02 	call	0x404	; 0x404 <ADC_StartConversion>
		uint16 Result=ADC_GetResult();	
  c8:	0e 94 0c 02 	call	0x418	; 0x418 <ADC_GetResult>
  cc:	8c 01       	movw	r16, r24
		if(!DIO_GetPinValue(PORTA,button))
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 19 03 	call	0x632	; 0x632 <DIO_GetPinValue>
  d6:	81 11       	cpse	r24, r1
  d8:	12 c0       	rjmp	.+36     	; 0xfe <ADC_LAB+0x6c>
		{
			DIO_SetPinValue(PORTA,LED,HIGH);
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	63 e0       	ldi	r22, 0x03	; 3
  de:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e2:	4a e0       	ldi	r20, 0x0A	; 10
  e4:	be 01       	movw	r22, r28
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	c8 01       	movw	r24, r16
  ec:	0e 94 47 03 	call	0x68e	; 0x68e <__itoa_ncheck>
			
			itoa(Result,StringResult,10);//1023
			LCD_WriteString(StringResult,0,0);
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WriteString>
  fc:	e2 cf       	rjmp	.-60     	; 0xc2 <ADC_LAB+0x30>
			
			
		}
		else
		{
			DIO_SetPinValue(PORTA,LED,LOW);
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	63 e0       	ldi	r22, 0x03	; 3
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
			LCD_WriteString("         ",0,0);
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	80 e6       	ldi	r24, 0x60	; 96
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_WriteString>
 114:	d6 cf       	rjmp	.-84     	; 0xc2 <ADC_LAB+0x30>

00000116 <LCD_WriteCmd>:


static uint8 InitStepFinished = 0;

void LCD_WriteCmd(uint8 Cmd)
{
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
	DIO_SetPinValue(PORTB,PIN1,LOW);//RS and R/W should be low to write command
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	DIO_SetPinValue(PORTB,PIN2,LOW);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	
	
	DIO_SetPinValue(PORTA,PIN4,GetBIT(Cmd,4));
 12e:	c4 fb       	bst	r28, 4
 130:	44 27       	eor	r20, r20
 132:	40 f9       	bld	r20, 0
 134:	64 e0       	ldi	r22, 0x04	; 4
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,PIN5,GetBIT(Cmd,5));
 13c:	c5 fb       	bst	r28, 5
 13e:	44 27       	eor	r20, r20
 140:	40 f9       	bld	r20, 0
 142:	65 e0       	ldi	r22, 0x05	; 5
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,PIN6,GetBIT(Cmd,6));
 14a:	c6 fb       	bst	r28, 6
 14c:	44 27       	eor	r20, r20
 14e:	40 f9       	bld	r20, 0
 150:	66 e0       	ldi	r22, 0x06	; 6
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	DIO_SetPinValue(PORTA,PIN7,GetBIT(Cmd,7));
 158:	4c 2f       	mov	r20, r28
 15a:	44 1f       	adc	r20, r20
 15c:	44 27       	eor	r20, r20
 15e:	44 1f       	adc	r20, r20
 160:	67 e0       	ldi	r22, 0x07	; 7
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	
	//delay and reading by down Edge
	
	//
	DIO_SetPinValue(PORTB,PIN3,HIGH);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	63 e0       	ldi	r22, 0x03	; 3
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	83 ec       	ldi	r24, 0xC3	; 195
 174:	99 e0       	ldi	r25, 0x09	; 9
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_WriteCmd+0x60>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_WriteCmd+0x66>
 17c:	00 00       	nop
	_delay_ms(1);                       //delay for reading block
	DIO_SetPinValue(PORTB,PIN3,LOW);
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	63 e0       	ldi	r22, 0x03	; 3
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	
	//
	if(InitStepFinished)
 188:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 18c:	88 23       	and	r24, r24
 18e:	59 f1       	breq	.+86     	; 0x1e6 <LCD_WriteCmd+0xd0>
	{
		
		DIO_SetPinValue(PORTA,PIN4,GetBIT(Cmd,0));
 190:	4c 2f       	mov	r20, r28
 192:	41 70       	andi	r20, 0x01	; 1
 194:	64 e0       	ldi	r22, 0x04	; 4
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN5,GetBIT(Cmd,1));
 19c:	c1 fb       	bst	r28, 1
 19e:	44 27       	eor	r20, r20
 1a0:	40 f9       	bld	r20, 0
 1a2:	65 e0       	ldi	r22, 0x05	; 5
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN6,GetBIT(Cmd,2));
 1aa:	c2 fb       	bst	r28, 2
 1ac:	44 27       	eor	r20, r20
 1ae:	40 f9       	bld	r20, 0
 1b0:	66 e0       	ldi	r22, 0x06	; 6
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN7,GetBIT(Cmd,3));
 1b8:	c3 fb       	bst	r28, 3
 1ba:	44 27       	eor	r20, r20
 1bc:	40 f9       	bld	r20, 0
 1be:	67 e0       	ldi	r22, 0x07	; 7
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>

		//delay and reading by down Edge
		
		//
		DIO_SetPinValue(PORTB,PIN3,HIGH);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
 1d0:	83 ec       	ldi	r24, 0xC3	; 195
 1d2:	99 e0       	ldi	r25, 0x09	; 9
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_WriteCmd+0xbe>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_WriteCmd+0xc4>
 1da:	00 00       	nop
		_delay_ms(1);                       //delay for reading block
		DIO_SetPinValue(PORTB,PIN3,LOW);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	63 e0       	ldi	r22, 0x03	; 3
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		
		//
	}
	
	
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <LCD_Intialize>:
void LCD_Intialize()
{
	DIO_SetPortDirection(PORTA,Output);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPortDirection>
	DIO_SetPortDirection(PORTB,Output);//for control pins
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 11 02 	call	0x422	; 0x422 <DIO_SetPortDirection>
 1fa:	2f e5       	ldi	r18, 0x5F	; 95
 1fc:	8a ee       	ldi	r24, 0xEA	; 234
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <LCD_Intialize+0x16>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_Intialize+0x20>
 20a:	00 00       	nop
	_delay_ms(30);
	LCD_WriteCmd(0x20);///intialize orders
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_WriteCmd>
	LCD_WriteCmd(0x20);
 212:	80 e2       	ldi	r24, 0x20	; 32
 214:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_WriteCmd>
	LCD_WriteCmd(0x80);
 218:	80 e8       	ldi	r24, 0x80	; 128
 21a:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_WriteCmd>
 21e:	83 ec       	ldi	r24, 0xC3	; 195
 220:	99 e0       	ldi	r25, 0x09	; 9
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_Intialize+0x38>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Intialize+0x3e>
 228:	00 00       	nop
	_delay_ms(1);
	LCD_WriteCmd(0x00);
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_WriteCmd>
	LCD_WriteCmd(0xf0);
 230:	80 ef       	ldi	r24, 0xF0	; 240
 232:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_WriteCmd>
 236:	83 ec       	ldi	r24, 0xC3	; 195
 238:	99 e0       	ldi	r25, 0x09	; 9
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Intialize+0x50>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Intialize+0x56>
 240:	00 00       	nop
	_delay_ms(1);
	LCD_WriteCmd(0x00);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_WriteCmd>
	LCD_WriteCmd(0x10);
 248:	80 e1       	ldi	r24, 0x10	; 16
 24a:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_WriteCmd>
 24e:	87 e8       	ldi	r24, 0x87	; 135
 250:	93 e1       	ldi	r25, 0x13	; 19
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <LCD_Intialize+0x68>
 256:	00 c0       	rjmp	.+0      	; 0x258 <LCD_Intialize+0x6e>
 258:	00 00       	nop
	_delay_ms(2);
	
	InitStepFinished=1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 260:	08 95       	ret

00000262 <LCD_WriteData>:
	
}

void LCD_WriteData(uint8 Data)
{
 262:	cf 93       	push	r28
 264:	c8 2f       	mov	r28, r24
		DIO_SetPinValue(PORTB,PIN1,HIGH);//RS and R/W should be high and  low to write Data
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTB,PIN2,LOW);
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	
	
		DIO_SetPinValue(PORTA,PIN4,GetBIT(Data,4));
 27a:	c4 fb       	bst	r28, 4
 27c:	44 27       	eor	r20, r20
 27e:	40 f9       	bld	r20, 0
 280:	64 e0       	ldi	r22, 0x04	; 4
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN5,GetBIT(Data,5));
 288:	c5 fb       	bst	r28, 5
 28a:	44 27       	eor	r20, r20
 28c:	40 f9       	bld	r20, 0
 28e:	65 e0       	ldi	r22, 0x05	; 5
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN6,GetBIT(Data,6));
 296:	c6 fb       	bst	r28, 6
 298:	44 27       	eor	r20, r20
 29a:	40 f9       	bld	r20, 0
 29c:	66 e0       	ldi	r22, 0x06	; 6
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN7,GetBIT(Data,7));
 2a4:	4c 2f       	mov	r20, r28
 2a6:	44 1f       	adc	r20, r20
 2a8:	44 27       	eor	r20, r20
 2aa:	44 1f       	adc	r20, r20
 2ac:	67 e0       	ldi	r22, 0x07	; 7
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	
							//delay and reading by down Edge
	
							//
							DIO_SetPinValue(PORTB,PIN3,HIGH);
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
 2be:	83 ec       	ldi	r24, 0xC3	; 195
 2c0:	99 e0       	ldi	r25, 0x09	; 9
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_WriteData+0x60>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_WriteData+0x66>
 2c8:	00 00       	nop
							_delay_ms(1);                       //delay for reading block
							DIO_SetPinValue(PORTB,PIN3,LOW);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
	
							//
	
		
		DIO_SetPinValue(PORTA,PIN4,GetBIT(Data,0));
 2d4:	4c 2f       	mov	r20, r28
 2d6:	41 70       	andi	r20, 0x01	; 1
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN5,GetBIT(Data,1));
 2e0:	c1 fb       	bst	r28, 1
 2e2:	44 27       	eor	r20, r20
 2e4:	40 f9       	bld	r20, 0
 2e6:	65 e0       	ldi	r22, 0x05	; 5
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN6,GetBIT(Data,2));
 2ee:	c2 fb       	bst	r28, 2
 2f0:	44 27       	eor	r20, r20
 2f2:	40 f9       	bld	r20, 0
 2f4:	66 e0       	ldi	r22, 0x06	; 6
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		DIO_SetPinValue(PORTA,PIN7,GetBIT(Data,3));
 2fc:	c3 fb       	bst	r28, 3
 2fe:	44 27       	eor	r20, r20
 300:	40 f9       	bld	r20, 0
 302:	67 e0       	ldi	r22, 0x07	; 7
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>

							//delay and reading by down Edge
		
							//
							DIO_SetPinValue(PORTB,PIN3,HIGH);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
 314:	83 ec       	ldi	r24, 0xC3	; 195
 316:	99 e0       	ldi	r25, 0x09	; 9
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_WriteData+0xb6>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_WriteData+0xbc>
 31e:	00 00       	nop
							_delay_ms(1);                       //delay for reading block
							DIO_SetPinValue(PORTB,PIN3,LOW);
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	63 e0       	ldi	r22, 0x03	; 3
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_SetPinValue>
		
							//
	
	
	
}
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <LCD_GoToPos>:
void LCD_GoToPos(uint8 Row,uint8 Column)
{
	if((Row<2)&&(Column<16))
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	50 f4       	brcc	.+20     	; 0x346 <LCD_GoToPos+0x18>
 332:	60 31       	cpi	r22, 0x10	; 16
 334:	40 f4       	brcc	.+16     	; 0x346 <LCD_GoToPos+0x18>
	{
		uint8 Address=(Row*0x40)+Column;
 336:	90 e4       	ldi	r25, 0x40	; 64
 338:	89 9f       	mul	r24, r25
 33a:	60 0d       	add	r22, r0
 33c:	11 24       	eor	r1, r1
 33e:	86 2f       	mov	r24, r22
		SetBIT(Address,7);
		LCD_WriteCmd(Address);
 340:	80 68       	ori	r24, 0x80	; 128
 342:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_WriteCmd>
 346:	08 95       	ret

00000348 <LCD_WriteString>:
	}
}
void LCD_WriteString(uint8 *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	8c 01       	movw	r16, r24
 356:	d6 2f       	mov	r29, r22
 358:	f4 2e       	mov	r15, r20
	uint8 Line0=0;//for row indexing
	LCD_GoToPos(Row,Column);
 35a:	64 2f       	mov	r22, r20
 35c:	8d 2f       	mov	r24, r29
 35e:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_GoToPos>
		LCD_WriteCmd(Address);
	}
}
void LCD_WriteString(uint8 *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
	uint8 Line0=0;//for row indexing
 362:	e1 2c       	mov	r14, r1
		SetBIT(Address,7);
		LCD_WriteCmd(Address);
	}
}
void LCD_WriteString(uint8 *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
 364:	c0 e0       	ldi	r28, 0x00	; 0
	uint8 Line0=0;//for row indexing
	LCD_GoToPos(Row,Column);
	while ((Str[Index]!='\0')&&((Row*16)+Index+Column)<32)//while ends by ending of string
 366:	1a c0       	rjmp	.+52     	; 0x39c <LCD_WriteString+0x54>
	{
		if (((Row*16)+Index+Column)<16)//for the first row indexing
 368:	20 31       	cpi	r18, 0x10	; 16
 36a:	31 05       	cpc	r19, r1
 36c:	24 f4       	brge	.+8      	; 0x376 <LCD_WriteString+0x2e>
		{
			LCD_WriteData(Str[Index]);
 36e:	0e 94 31 01 	call	0x262	; 0x262 <LCD_WriteData>
			Index++;
 372:	cf 5f       	subi	r28, 0xFF	; 255
 374:	13 c0       	rjmp	.+38     	; 0x39c <LCD_WriteString+0x54>
		}
		else if((((Row*16)+Index+Column)==16))//for the end of first row indexing and going to the second
 376:	20 31       	cpi	r18, 0x10	; 16
 378:	31 05       	cpc	r19, r1
 37a:	39 f4       	brne	.+14     	; 0x38a <LCD_WriteString+0x42>
		{
			LCD_GoToPos(1,0);
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_GoToPos>
			Line0=1;
 384:	ee 24       	eor	r14, r14
 386:	e3 94       	inc	r14
 388:	09 c0       	rjmp	.+18     	; 0x39c <LCD_WriteString+0x54>
		}
		else if(((Row*16)+Index+Column)<32&&Line0==1)//for the second row indexing
 38a:	20 32       	cpi	r18, 0x20	; 32
 38c:	31 05       	cpc	r19, r1
 38e:	34 f4       	brge	.+12     	; 0x39c <LCD_WriteString+0x54>
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	e9 12       	cpse	r14, r25
 394:	03 c0       	rjmp	.+6      	; 0x39c <LCD_WriteString+0x54>
		{
			LCD_WriteData(Str[Index]);
 396:	0e 94 31 01 	call	0x262	; 0x262 <LCD_WriteData>
			Index++;
 39a:	cf 5f       	subi	r28, 0xFF	; 255
}
void LCD_WriteString(uint8 *Str,uint8 Row,uint8 Column)
{	uint8 Index=0;//for the curser indexing
	uint8 Line0=0;//for row indexing
	LCD_GoToPos(Row,Column);
	while ((Str[Index]!='\0')&&((Row*16)+Index+Column)<32)//while ends by ending of string
 39c:	f8 01       	movw	r30, r16
 39e:	ec 0f       	add	r30, r28
 3a0:	f1 1d       	adc	r31, r1
 3a2:	80 81       	ld	r24, Z
 3a4:	88 23       	and	r24, r24
 3a6:	61 f0       	breq	.+24     	; 0x3c0 <LCD_WriteString+0x78>
 3a8:	2c 2f       	mov	r18, r28
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	90 e1       	ldi	r25, 0x10	; 16
 3ae:	d9 9f       	mul	r29, r25
 3b0:	20 0d       	add	r18, r0
 3b2:	31 1d       	adc	r19, r1
 3b4:	11 24       	eor	r1, r1
 3b6:	2f 0d       	add	r18, r15
 3b8:	31 1d       	adc	r19, r1
 3ba:	20 32       	cpi	r18, 0x20	; 32
 3bc:	31 05       	cpc	r19, r1
 3be:	a4 f2       	brlt	.-88     	; 0x368 <LCD_WriteString+0x20>
		{
			LCD_WriteData(Str[Index]);
			Index++;
		}
	}
}
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	08 95       	ret

000003ce <main>:
#include "HAL/LCD/lCD.h"

int main()
{
	
	ADC_LAB();
 3ce:	0e 94 49 00 	call	0x92	; 0x92 <ADC_LAB>
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <main+0x4>

000003d4 <ADC_Intialize>:
void ADC_Intialize()

{	
	//5 STEPS TO INTIALIZE ADC 
		//1)SELECT VOLTAGE REFERNCE
	ADMUX_REG &= ADC_VOLTAGE_REF_CLR_msk;
 3d4:	87 b1       	in	r24, 0x07	; 7
 3d6:	8f 73       	andi	r24, 0x3F	; 63
 3d8:	87 b9       	out	0x07, r24	; 7
	ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
 3da:	87 b1       	in	r24, 0x07	; 7
 3dc:	80 64       	ori	r24, 0x40	; 64
 3de:	87 b9       	out	0x07, r24	; 7
	////////////////////////*/////////////////////////////////*///////////////////////
	
	
	//2)SELCET MODE
	#if (ADC_MODE_SELECTOR==ADC_MODE_AUTO_TRIGGER)
		SetBIT(ADCSRA_REG,5);			// WE GONE TO ADCSRA_REG REGISTER TO CHOOSE AUTO TRIGGER MODE THEN WE GONE TO SFIOR_REG TO CHOOSE THE MODE OF AUTO TRIGGER AS FREE RUNNING MODE 
 3e0:	86 b1       	in	r24, 0x06	; 6
 3e2:	80 62       	ori	r24, 0x20	; 32
 3e4:	86 b9       	out	0x06, r24	; 6
		SFIOR_REG &=ADC_AUTO_TRIG_SRC_CLR_msk;
 3e6:	80 b7       	in	r24, 0x30	; 48
 3e8:	8f 71       	andi	r24, 0x1F	; 31
 3ea:	80 bf       	out	0x30, r24	; 48
		SFIOR_REG|=ADC_AUTO_TRIGGER_SRCE_SELECTOR;
 3ec:	80 b7       	in	r24, 0x30	; 48
 3ee:	80 bf       	out	0x30, r24	; 48
	///////////////////////////*////////////////////////////////*////////////////////
	
	
	 ///3) Select Adjustment
	 #if(ADC_ADJUSTMENT_SELCTOR==ADC_RIGHT_ADJUSTMENT)
			ClearBIT(ADMUX_REG,5);
 3f0:	87 b1       	in	r24, 0x07	; 7
 3f2:	8f 7d       	andi	r24, 0xDF	; 223
 3f4:	87 b9       	out	0x07, r24	; 7
	#endif
	///////////////////////////////////////////////*/*/////////////////////
	
	
	// 4)CLEAR INTERTUPT FLAG
	SetBIT(ADCSRA_REG,4); //note clearing the flag by setting ADIF TO one not zero hintttt
 3f6:	86 b1       	in	r24, 0x06	; 6
 3f8:	80 61       	ori	r24, 0x10	; 16
 3fa:	86 b9       	out	0x06, r24	; 6
	
	////////////
	// 5)ENABLE ADC
	SetBIT(ADCSRA_REG,7);
 3fc:	86 b1       	in	r24, 0x06	; 6
 3fe:	80 68       	ori	r24, 0x80	; 128
 400:	86 b9       	out	0x06, r24	; 6
 402:	08 95       	ret

00000404 <ADC_StartConversion>:
}

void ADC_StartConversion(ADC_Channel_Types ADC_Channel)
{
	///SELECT CHANNEL
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_CLR_msk;
 404:	97 b1       	in	r25, 0x07	; 7
 406:	90 7e       	andi	r25, 0xE0	; 224
 408:	97 b9       	out	0x07, r25	; 7
	ADMUX_REG |= ADC_Channel; 
 40a:	97 b1       	in	r25, 0x07	; 7
 40c:	89 2b       	or	r24, r25
 40e:	87 b9       	out	0x07, r24	; 7
	//START CONVERSION
	SetBIT(ADCSRA_REG,6);
 410:	86 b1       	in	r24, 0x06	; 6
 412:	80 64       	ori	r24, 0x40	; 64
 414:	86 b9       	out	0x06, r24	; 6
 416:	08 95       	ret

00000418 <ADC_GetResult>:
}

uint16 ADC_GetResult()
{
	while(!GetBIT(ADCSRA_REG,4));//hint bit 4 updated after data is converted and upadted in register ADLH
 418:	34 9b       	sbis	0x06, 4	; 6
 41a:	fe cf       	rjmp	.-4      	; 0x418 <ADC_GetResult>
		
		return(ADCLH_REG);
 41c:	84 b1       	in	r24, 0x04	; 4
 41e:	95 b1       	in	r25, 0x05	; 5
	
 420:	08 95       	ret

00000422 <DIO_SetPortDirection>:
	switch(Port_ID)
	{
		case(PORTA): PORTA_Reg  =Value;break;
		case(PORTB): PORTB_Reg = Value;break;
		case(PORTC): PORTC_Reg = Value;break;
		case(PORTD): PORTD_Reg = Value;break;
 422:	61 30       	cpi	r22, 0x01	; 1
 424:	a1 f4       	brne	.+40     	; 0x44e <DIO_SetPortDirection+0x2c>
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	49 f0       	breq	.+18     	; 0x43c <DIO_SetPortDirection+0x1a>
 42a:	28 f0       	brcs	.+10     	; 0x436 <DIO_SetPortDirection+0x14>
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	49 f0       	breq	.+18     	; 0x442 <DIO_SetPortDirection+0x20>
 430:	83 30       	cpi	r24, 0x03	; 3
 432:	51 f0       	breq	.+20     	; 0x448 <DIO_SetPortDirection+0x26>
 434:	08 95       	ret
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	8a bb       	out	0x1a, r24	; 26
 43a:	08 95       	ret
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	87 bb       	out	0x17, r24	; 23
 440:	08 95       	ret
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	84 bb       	out	0x14, r24	; 20
 446:	08 95       	ret
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	81 bb       	out	0x11, r24	; 17
 44c:	08 95       	ret
 44e:	61 11       	cpse	r22, r1
 450:	0f c0       	rjmp	.+30     	; 0x470 <DIO_SetPortDirection+0x4e>
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	41 f0       	breq	.+16     	; 0x466 <DIO_SetPortDirection+0x44>
 456:	28 f0       	brcs	.+10     	; 0x462 <DIO_SetPortDirection+0x40>
 458:	82 30       	cpi	r24, 0x02	; 2
 45a:	39 f0       	breq	.+14     	; 0x46a <DIO_SetPortDirection+0x48>
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	39 f0       	breq	.+14     	; 0x46e <DIO_SetPortDirection+0x4c>
 460:	08 95       	ret
 462:	1a ba       	out	0x1a, r1	; 26
 464:	08 95       	ret
 466:	17 ba       	out	0x17, r1	; 23
 468:	08 95       	ret
 46a:	14 ba       	out	0x14, r1	; 20
 46c:	08 95       	ret
 46e:	11 ba       	out	0x11, r1	; 17
 470:	08 95       	ret

00000472 <DIO_SetPinDirection>:
}


void DIO_SetPinDirection(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID,DIO_Direcrion Direction)
{
	if(Direction==Input)
 472:	41 11       	cpse	r20, r1
 474:	38 c0       	rjmp	.+112    	; 0x4e6 <DIO_SetPinDirection+0x74>
	{
		switch(Port_ID)
 476:	81 30       	cpi	r24, 0x01	; 1
 478:	91 f0       	breq	.+36     	; 0x49e <DIO_SetPinDirection+0x2c>
 47a:	28 f0       	brcs	.+10     	; 0x486 <DIO_SetPinDirection+0x14>
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	d9 f0       	breq	.+54     	; 0x4b6 <DIO_SetPinDirection+0x44>
 480:	83 30       	cpi	r24, 0x03	; 3
 482:	29 f1       	breq	.+74     	; 0x4ce <DIO_SetPinDirection+0x5c>
 484:	08 95       	ret
		{
			case(PORTA):ClearBIT(DDRA_Reg,Pin_ID);break;
 486:	2a b3       	in	r18, 0x1a	; 26
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_SetPinDirection+0x20>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_SetPinDirection+0x1c>
 496:	80 95       	com	r24
 498:	82 23       	and	r24, r18
 49a:	8a bb       	out	0x1a, r24	; 26
 49c:	08 95       	ret
			case(PORTB):ClearBIT(DDRB_Reg,Pin_ID);break;
 49e:	27 b3       	in	r18, 0x17	; 23
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_SetPinDirection+0x38>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_SetPinDirection+0x34>
 4ae:	80 95       	com	r24
 4b0:	82 23       	and	r24, r18
 4b2:	87 bb       	out	0x17, r24	; 23
 4b4:	08 95       	ret
			case(PORTC):ClearBIT(DDRC_Reg,Pin_ID);break;
 4b6:	24 b3       	in	r18, 0x14	; 20
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_SetPinDirection+0x50>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_SetPinDirection+0x4c>
 4c6:	80 95       	com	r24
 4c8:	82 23       	and	r24, r18
 4ca:	84 bb       	out	0x14, r24	; 20
 4cc:	08 95       	ret
			case(PORTD):ClearBIT(DDRD_Reg,Pin_ID);break;
 4ce:	21 b3       	in	r18, 0x11	; 17
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_SetPinDirection+0x68>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	6a 95       	dec	r22
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_SetPinDirection+0x64>
 4de:	80 95       	com	r24
 4e0:	82 23       	and	r24, r18
 4e2:	81 bb       	out	0x11, r24	; 17
 4e4:	08 95       	ret
		}
	}
	
	else if(Direction==Output)
 4e6:	41 30       	cpi	r20, 0x01	; 1
 4e8:	99 f5       	brne	.+102    	; 0x550 <DIO_SetPinDirection+0xde>
	{
		
		switch(Port_ID)
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	89 f0       	breq	.+34     	; 0x510 <DIO_SetPinDirection+0x9e>
 4ee:	28 f0       	brcs	.+10     	; 0x4fa <DIO_SetPinDirection+0x88>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	c9 f0       	breq	.+50     	; 0x526 <DIO_SetPinDirection+0xb4>
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	11 f1       	breq	.+68     	; 0x53c <DIO_SetPinDirection+0xca>
 4f8:	08 95       	ret
		{
				case(PORTA):SetBIT(DDRA_Reg,Pin_ID);break;
 4fa:	2a b3       	in	r18, 0x1a	; 26
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_SetPinDirection+0x94>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_SetPinDirection+0x90>
 50a:	82 2b       	or	r24, r18
 50c:	8a bb       	out	0x1a, r24	; 26
 50e:	08 95       	ret
				case(PORTB):SetBIT(DDRB_Reg,Pin_ID);break;
 510:	27 b3       	in	r18, 0x17	; 23
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_SetPinDirection+0xaa>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_SetPinDirection+0xa6>
 520:	82 2b       	or	r24, r18
 522:	87 bb       	out	0x17, r24	; 23
 524:	08 95       	ret
				case(PORTC):SetBIT(DDRC_Reg,Pin_ID);break;
 526:	24 b3       	in	r18, 0x14	; 20
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_SetPinDirection+0xc0>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_SetPinDirection+0xbc>
 536:	82 2b       	or	r24, r18
 538:	84 bb       	out	0x14, r24	; 20
 53a:	08 95       	ret
				case(PORTD):SetBIT(DDRD_Reg,Pin_ID);break;
 53c:	21 b3       	in	r18, 0x11	; 17
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_SetPinDirection+0xd6>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_SetPinDirection+0xd2>
 54c:	82 2b       	or	r24, r18
 54e:	81 bb       	out	0x11, r24	; 17
 550:	08 95       	ret

00000552 <DIO_SetPinValue>:
		}
	}
}
void DIO_SetPinValue(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID, STD_Value Value)
{
	if(Value==HIGH)
 552:	41 30       	cpi	r20, 0x01	; 1
 554:	a1 f5       	brne	.+104    	; 0x5be <DIO_SetPinValue+0x6c>
	{
		switch(Port_ID)
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	89 f0       	breq	.+34     	; 0x57c <DIO_SetPinValue+0x2a>
 55a:	28 f0       	brcs	.+10     	; 0x566 <DIO_SetPinValue+0x14>
 55c:	82 30       	cpi	r24, 0x02	; 2
 55e:	c9 f0       	breq	.+50     	; 0x592 <DIO_SetPinValue+0x40>
 560:	83 30       	cpi	r24, 0x03	; 3
 562:	11 f1       	breq	.+68     	; 0x5a8 <DIO_SetPinValue+0x56>
 564:	08 95       	ret
		{
			case(PORTA): SetBIT(PORTA_Reg,Pin_ID);break;
 566:	2b b3       	in	r18, 0x1b	; 27
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_SetPinValue+0x20>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_SetPinValue+0x1c>
 576:	82 2b       	or	r24, r18
 578:	8b bb       	out	0x1b, r24	; 27
 57a:	08 95       	ret
			case(PORTB): SetBIT(PORTB_Reg,Pin_ID);break;
 57c:	28 b3       	in	r18, 0x18	; 24
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_SetPinValue+0x36>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_SetPinValue+0x32>
 58c:	82 2b       	or	r24, r18
 58e:	88 bb       	out	0x18, r24	; 24
 590:	08 95       	ret
			case(PORTC): SetBIT(PORTC_Reg,Pin_ID);break;
 592:	25 b3       	in	r18, 0x15	; 21
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_SetPinValue+0x4c>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_SetPinValue+0x48>
 5a2:	82 2b       	or	r24, r18
 5a4:	85 bb       	out	0x15, r24	; 21
 5a6:	08 95       	ret
			case(PORTD): SetBIT(PORTD_Reg,Pin_ID);break;
 5a8:	22 b3       	in	r18, 0x12	; 18
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_SetPinValue+0x62>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	6a 95       	dec	r22
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_SetPinValue+0x5e>
 5b8:	82 2b       	or	r24, r18
 5ba:	82 bb       	out	0x12, r24	; 18
 5bc:	08 95       	ret
			
		}
		
	}
	else if(Value==LOW)
 5be:	41 11       	cpse	r20, r1
 5c0:	37 c0       	rjmp	.+110    	; 0x630 <DIO_SetPinValue+0xde>
	{
			switch(Port_ID)
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	91 f0       	breq	.+36     	; 0x5ea <DIO_SetPinValue+0x98>
 5c6:	28 f0       	brcs	.+10     	; 0x5d2 <DIO_SetPinValue+0x80>
 5c8:	82 30       	cpi	r24, 0x02	; 2
 5ca:	d9 f0       	breq	.+54     	; 0x602 <DIO_SetPinValue+0xb0>
 5cc:	83 30       	cpi	r24, 0x03	; 3
 5ce:	29 f1       	breq	.+74     	; 0x61a <DIO_SetPinValue+0xc8>
 5d0:	08 95       	ret
			{
				case(PORTA): ClearBIT(PORTA_Reg,Pin_ID);break;
 5d2:	2b b3       	in	r18, 0x1b	; 27
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_SetPinValue+0x8c>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_SetPinValue+0x88>
 5e2:	80 95       	com	r24
 5e4:	82 23       	and	r24, r18
 5e6:	8b bb       	out	0x1b, r24	; 27
 5e8:	08 95       	ret
				case(PORTB): ClearBIT(PORTB_Reg,Pin_ID);break;
 5ea:	28 b3       	in	r18, 0x18	; 24
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_SetPinValue+0xa4>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_SetPinValue+0xa0>
 5fa:	80 95       	com	r24
 5fc:	82 23       	and	r24, r18
 5fe:	88 bb       	out	0x18, r24	; 24
 600:	08 95       	ret
				case(PORTC): ClearBIT(PORTC_Reg,Pin_ID);break;
 602:	25 b3       	in	r18, 0x15	; 21
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_SetPinValue+0xbc>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_SetPinValue+0xb8>
 612:	80 95       	com	r24
 614:	82 23       	and	r24, r18
 616:	85 bb       	out	0x15, r24	; 21
 618:	08 95       	ret
				case(PORTD): ClearBIT(PORTD_Reg,Pin_ID);break;
 61a:	22 b3       	in	r18, 0x12	; 18
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_SetPinValue+0xd4>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	6a 95       	dec	r22
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_SetPinValue+0xd0>
 62a:	80 95       	com	r24
 62c:	82 23       	and	r24, r18
 62e:	82 bb       	out	0x12, r24	; 18
 630:	08 95       	ret

00000632 <DIO_GetPinValue>:
}

 STD_Value DIO_GetPinValue(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID)
{
	 STD_Value pinvalue=0;
	switch(Port_ID)
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	79 f0       	breq	.+30     	; 0x654 <DIO_GetPinValue+0x22>
 636:	28 f0       	brcs	.+10     	; 0x642 <DIO_GetPinValue+0x10>
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	a9 f0       	breq	.+42     	; 0x666 <DIO_GetPinValue+0x34>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	e1 f0       	breq	.+56     	; 0x678 <DIO_GetPinValue+0x46>
 640:	24 c0       	rjmp	.+72     	; 0x68a <DIO_GetPinValue+0x58>
	{
		case (PORTA):pinvalue=GetBIT(PINA_Reg,Pin_ID);break;
 642:	89 b3       	in	r24, 0x19	; 25
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_GetPinValue+0x1a>
 648:	95 95       	asr	r25
 64a:	87 95       	ror	r24
 64c:	6a 95       	dec	r22
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_GetPinValue+0x16>
 650:	81 70       	andi	r24, 0x01	; 1
 652:	08 95       	ret
		case (PORTB):pinvalue=GetBIT(PINB_Reg,Pin_ID);break;
 654:	86 b3       	in	r24, 0x16	; 22
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_GetPinValue+0x2c>
 65a:	95 95       	asr	r25
 65c:	87 95       	ror	r24
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_GetPinValue+0x28>
 662:	81 70       	andi	r24, 0x01	; 1
 664:	08 95       	ret
		case (PORTC):pinvalue=GetBIT(PINC_Reg,Pin_ID);break;
 666:	83 b3       	in	r24, 0x13	; 19
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_GetPinValue+0x3e>
 66c:	95 95       	asr	r25
 66e:	87 95       	ror	r24
 670:	6a 95       	dec	r22
 672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_GetPinValue+0x3a>
 674:	81 70       	andi	r24, 0x01	; 1
 676:	08 95       	ret
		case (PORTD):pinvalue=GetBIT(PIND_Reg,Pin_ID);break;
 678:	89 b3       	in	r24, 0x19	; 25
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_GetPinValue+0x50>
 67e:	95 95       	asr	r25
 680:	87 95       	ror	r24
 682:	6a 95       	dec	r22
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_GetPinValue+0x4c>
 686:	81 70       	andi	r24, 0x01	; 1
 688:	08 95       	ret
	}
}

 STD_Value DIO_GetPinValue(DIO_Port_ID Port_ID,DIO_PIN_ID Pin_ID)
{
	 STD_Value pinvalue=0;
 68a:	80 e0       	ldi	r24, 0x00	; 0
		case (PORTC):pinvalue=GetBIT(PINC_Reg,Pin_ID);break;
		case (PORTD):pinvalue=GetBIT(PIND_Reg,Pin_ID);break;
	}
	return(pinvalue);
	
}
 68c:	08 95       	ret

0000068e <__itoa_ncheck>:
 68e:	bb 27       	eor	r27, r27
 690:	4a 30       	cpi	r20, 0x0A	; 10
 692:	31 f4       	brne	.+12     	; 0x6a0 <__itoa_ncheck+0x12>
 694:	99 23       	and	r25, r25
 696:	22 f4       	brpl	.+8      	; 0x6a0 <__itoa_ncheck+0x12>
 698:	bd e2       	ldi	r27, 0x2D	; 45
 69a:	90 95       	com	r25
 69c:	81 95       	neg	r24
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__utoa_common>

000006a4 <__utoa_ncheck>:
 6a4:	bb 27       	eor	r27, r27

000006a6 <__utoa_common>:
 6a6:	fb 01       	movw	r30, r22
 6a8:	55 27       	eor	r21, r21
 6aa:	aa 27       	eor	r26, r26
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	aa 1f       	adc	r26, r26
 6b2:	a4 17       	cp	r26, r20
 6b4:	10 f0       	brcs	.+4      	; 0x6ba <__utoa_common+0x14>
 6b6:	a4 1b       	sub	r26, r20
 6b8:	83 95       	inc	r24
 6ba:	50 51       	subi	r21, 0x10	; 16
 6bc:	b9 f7       	brne	.-18     	; 0x6ac <__utoa_common+0x6>
 6be:	a0 5d       	subi	r26, 0xD0	; 208
 6c0:	aa 33       	cpi	r26, 0x3A	; 58
 6c2:	08 f0       	brcs	.+2      	; 0x6c6 <__utoa_common+0x20>
 6c4:	a9 5d       	subi	r26, 0xD9	; 217
 6c6:	a1 93       	st	Z+, r26
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	79 f7       	brne	.-34     	; 0x6aa <__utoa_common+0x4>
 6cc:	b1 11       	cpse	r27, r1
 6ce:	b1 93       	st	Z+, r27
 6d0:	11 92       	st	Z+, r1
 6d2:	cb 01       	movw	r24, r22
 6d4:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <strrev>

000006d8 <strrev>:
 6d8:	dc 01       	movw	r26, r24
 6da:	fc 01       	movw	r30, r24
 6dc:	67 2f       	mov	r22, r23
 6de:	71 91       	ld	r23, Z+
 6e0:	77 23       	and	r23, r23
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <strrev+0x4>
 6e4:	32 97       	sbiw	r30, 0x02	; 2
 6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <strrev+0x18>
 6e8:	7c 91       	ld	r23, X
 6ea:	6d 93       	st	X+, r22
 6ec:	70 83       	st	Z, r23
 6ee:	62 91       	ld	r22, -Z
 6f0:	ae 17       	cp	r26, r30
 6f2:	bf 07       	cpc	r27, r31
 6f4:	c8 f3       	brcs	.-14     	; 0x6e8 <strrev+0x10>
 6f6:	08 95       	ret

000006f8 <_exit>:
 6f8:	f8 94       	cli

000006fa <__stop_program>:
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <__stop_program>
